# import sys
# print(sys.executable)
import re
from django import forms
from django.shortcuts import redirect, render
from django.template import RequestContext
from .models import *
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from django.contrib.auth import authenticate, login,logout
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
import fitz

@login_required(login_url='/login/')
def home(request):
    return render(request,'home.html')

@login_required(login_url='/login/')
def files(request):
    if request.method=="POST":
        data=request.POST
        pdf_file=request.FILES['file']
        if pdf_file:
            try:
                text = extract_text_from_pdf(pdf_file)
                is_malicious = check_for_malware(text)
                return JsonResponse({'is_malicious': is_malicious})
            except Exception as e:
                return JsonResponse({'error': str(e)}, status=500)
        # malware.objects.create(
        #     file=file,
        #     )
    return render(request,'files.html')

def extract_text_from_pdf(pdf_file):
    # Open the PDF file and extract text
     text = ''
     with pdf_file.open() as file:
        doc = fitz.open(stream=file.read(), filetype="pdf")
        for page_num in range(doc.page_count):
            page = doc[page_num]
            text += page.get_text()
     return text


def check_for_malware(text):
    # Basic malware pattern matching (you may need to enhance this)
    malware_patterns = [
        r'evil_pattern_1',
        r'evil_pattern_2',
        # Add more patterns as needed
    ]

    for pattern in malware_patterns:
        if re.search(pattern, text, re.IGNORECASE):
            return True

    return False

@login_required(login_url='/login/')
def images(request):
    if request.method=="POST":
        data=request.POST
        image=request.FILES.get('image')
        malware.objects.create(
            image=image,
            )
    return render(request,'images.html')


# def links(request):
#     if request.method=="POST":
#         data=request.POST
#         links=request.FILES['links']
#         malware.objects.create(
#             links=links,
#             )
#     return render(request,'links.html')


class LinkUploadForm(forms.Form):
    link = forms.URLField(label='Link to analyze', widget=forms.TextInput(attrs={'placeholder': 'Enter the link'}))

@login_required(login_url='/login/')
def links(request):
    if request.method == "POST":
        form = LinkUploadForm(request.POST)

        if form.is_valid():
            link = form.cleaned_data['link']

            try:
                # Fetch content from the link
                response = RequestContext.get(link)
                response.raise_for_status()

                # Perform basic analysis on the fetched content
                is_malicious = check_for_malware(response.text)

                return JsonResponse({'is_malicious': is_malicious})

            except Exception as e:
                return JsonResponse({'error': str(e)}, status=500)
    else:
        form = LinkUploadForm()

    return render(request, 'links.html', {'form': form})






def login_page(request):
    if request.method=="POST":
        username = request.POST.get('username')
        password = request.POST.get('password')

        if not User.objects.filter(username = username).exists():
            messages.info(request, "Invalid Username")
            return redirect('/login/')
        user = authenticate(username=username, password=password)

        if user is None:
            messages.error(request,'Invalid Username or Password')
            return redirect('/login/')

        else:
            login(request,user)
            return redirect("/")

    return render(request, 'login.html')

@login_required(login_url='/login/')
def logout_page(request):
    logout(request)
    return redirect('/login/')

def register(request):
    if request.method=="POST":
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        username = request.POST.get('username')
        password = request.POST.get('password')


        user_exists = User.objects.filter(username = username).exists()
        

        if user_exists:
            messages.info(request, "Username already exists ")
            return redirect('/register/')
        

        user = User.objects.create(
            first_name=first_name,
            last_name=last_name,
            username=username,
        )
        user.set_password(password)  # Hash the password before saving it in the database
        user.save()
        messages.info(request, "Account Successfully created")
        # return HttpResponseRedirect('/login/')
        return redirect('/register/')


    return render(request, 'register.html')